#!/usr/bin/env bash

set -eE
set -o pipefail

clone_repo() {
  local src_dir=$1
  local version=$2

  # drop the -dev from the version number (if exists)
  number=${version%"-dev"}

  # used to cache the qt repositiory because it and its submodules
  # are huuuugggeeeee...
  cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/asdf-qt"
  cache_src="$cache_dir/src"

  if [ ! -d "$cache_src" ]
  then
    mkdir -p "$cache_dir"
    trap "rm -rf $cache_dir" ERR

    git clone git://code.qt.io/qt/qt5.git $cache_src
    cd $cache_src

    git checkout "v${number}"
    perl init-repository
  fi

  cp -rv $cache_src $src_dir

  cd $src_dir
  git checkout "v${number}"
  perl init-repository -f
}

install() {
  local src_dir=$1
  local build_dir=$2
  local install_dir=$3
  local n_cores=$4
  local version=$5

  mkdir $build_dir
  cd $build_dir

  if [[ $version == *"-dev" ]]
  then
    $src_dir/configure \
      -developer-build \
      -prefix $install_dir \
      -opensource \
      -confirm-license \
      -nomake examples \
      -nomake tests
  else
    $src_dir/configure \
      -prefix $install_dir \
      -opensource \
      -confirm-license \
      -nomake examples \
      -nomake tests
  fi

  make -j$n_cores
  make install
}

main() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local n_cores=$4

  tmp_dir=$(mktemp -d "${TMPDIR:-/tmp}/asdf-qt-XXXXXXXXXX")

  # cleanup on failures
  trap "rm -rf $tmp_dir" EXIT
  trap "rm -rf $install_path" ERR

  src_dir="$tmp_dir/src"
  clone_repo $src_dir $version

  build_dir="$tmp_dir/build"
  install $src_dir $build_dir $install_path $n_cores $version
}

main $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH $ASDF_CONCURRENCY
