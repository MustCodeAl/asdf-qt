#!/usr/bin/env bash

set -eE
set -o pipefail


host() {
  if [[ "$(uname)" = "Darwin" ]]; then
    echo "mac"
  elif [[ "$(uname)" = "Linux" ]]; then
    echo "linux"
  else
    echo "Unsupported platform: $(uname)" >&2
    exit 1
  fi
}

arch() {
  if [[ "$(uname -m)" = "x86" ]]; then
    echo "x86"
  elif [[ "$(uname -m)" = "x86_64" ]]; then
    echo "x64"
  else
    echo "Unsupported architecture: $(uname -m)." >&2
    exit 1
  fi
}

target() {
  echo "desktop"
}

compiler() {
  if [[ "$(host)" = "mac" ]]; then
    echo "clang_64"
  elif [[ "$(host)" = "linux" && "$(arch)" = "x86" ]]; then
    echo "gcc"
  elif [[ "$(host)" = "linux" && "$(arch)" = "x64" ]]; then
    echo "gcc_64"
  else
    echo "Unknown compiler choice" >&2
    exit 1
  fi
}

packages() {
  local meta_url=$1

  meta=$(curl -s $meta_url)

  package_count=$(echo $meta | xmllint --xpath "count(/Updates/PackageUpdate)" -)

  all_names=""

  for i in $(seq 1 $package_count)
  do
    name=$(echo $meta | xmllint --xpath "/Updates/PackageUpdate[$i]/Name/text()" -)
    all_names="$all_names $name"
  done

  echo $all_names
}

package_archives() {
  local meta_url=$1
  local package_name=$2

  meta=$(curl -s $meta_url)

  version_path="/Updates/PackageUpdate/Name[text()=\"${package_name}\"]/following-sibling::Version/text()"
  version=$(echo $meta | xmllint --xpath "${version_path}" - 2> /dev/null)

  if [ $? -ne 0 ]; then
    echo ""
    return
  fi

  archives_path="/Updates/PackageUpdate/Name[text()=\"${package_name}\"]/following-sibling::DownloadableArchives/text()"
  archives=$(echo $meta | xmllint --xpath "${archives_path}" - 2> /dev/null)

  if [ $? -eq 0 ]; then
    archives=$(echo $archives | sed 's:, : :g' | sed "s/[^ ]* */${version}&/g")
    echo $archives
  else
      echo ""
  fi
}

download_archives() {
  local repo_url=$1
  local meta_url=$2
  local all_package_names=$3
  local destination=$4

  all_downloads=""

  for package_name in $all_package_names
  do
    all_archive_names="$(package_archives $meta_url $package_name)"

    for archive_name in $all_archive_names
    do
      package_url="${repo_url}/${package_name}/${archive_name}"
      dest_uri="${destination}/${archive_name}"

      # download these in parrelel &
      echo "Starting download of archive: ${archive_name}" 1>&2
      curl -s -L $package_url --output $dest_uri &

      all_downloads="$dest_uri $all_downloads"
    done
  done

  # wait for downloads
  wait

  echo $all_downloads
}

unpack() {
  local archive_paths=$1
  local destination=$2

  for download in $archive_paths
  do
    # brew install p7zip required. Though apple Archive Utility app seems to work
    # but need to reproduce file unzipping over the top. Also need to look at ubuntu
    echo "Extracting ${download}"
    7z x -aoa -bd -y "${download}" -o"${destination}" 1> /dev/null
  done
}

write_config() {
  local directory=$1

  # qt.conf
  qt_conf="${directory}/bin/qt.conf"

  echo "Tweaking ${qt_config}"

  echo "[Paths]" >> "${qt_conf}"
  echo "Prefix=.." >> "${qt_conf}"

  # qtconfig.pri
  qtconfig_pri="${directory}/mkspecs/qconfig.pri"
  qtconfig_tmp="${directory}/mkspecs/qconfig.pri.tmp"

  echo "Tweaking ${qtconfig_pri}"

  cat "${qtconfig_pri}" \
    | sed -e "s/QT_EDITION = .*/QT_EDITION = OpenSource/" \
    | sed -e "s/QT_LICHECK = .*/QT_LICHECK =/" \
    > "${qtconfig_tmp}"
  mv -f "${qtconfig_tmp}" "${qtconfig_pri}"
}

download_binary() {
  local version=$1
  local download_path=$2

  tmp_dir=$(mktemp -d "${TMPDIR:-/tmp}/asdf-qt-XXXXXXXXXX")

  # cleanup on failures
  trap "rm -rf $tmp_dir" EXIT
  trap "rm -rf $download_path/*" ERR

  # drop the -dev from the version number (if exists)
  number=${version%"-dev"}
  # take just the major number (pre first ".")
  major=${number%%.*}
  # drop all the points (5.11.3 -> 5113)
  mushed=${number//.}

  # Make report and meta data endpoints
  base_url="https://download.qt.io/online/qtsdkrepository"
  repo_url="${base_url}/$(host)_$(arch)/$(target)/qt${major}_${mushed}"
  meta_url="${repo_url}/Updates.xml"

  # aqtinstall just targets by default 'qt.qt5.5113.clang_64', 'qt.5113.clang_64'
  # so maybe other packages are optional enviroment vars ASDF_QT_*
  # all_package_names="$(packages $meta_url)"
  all_package_names="qt.qt${major}.${mushed}.$(compiler) qt.${mushed}.$(compiler)"

  # build dev version
  # qt.qt5.5142.debug_info qt.qt5.5142.debug_info.clang_64
  if [[ $version == *"-dev" ]]; then
    all_package_names="$all_package_names qt.qt${major}.${mushed}.debug_info"
    all_package_names="$all_package_names qt.qt${major}.${mushed}.debug_info.$(compiler)"
    all_package_names="$all_package_names qt.${mushed}.debug_info"
    all_package_names="$all_package_names qt.${mushed}.debug_info.$(compiler)"
  fi

  echo "Downloading..."
  all_downloads=$(download_archives "${repo_url}" "${meta_url}" "${all_package_names}" "${tmp_dir}")
  echo "Download complete"

  echo "Extracting..."
  unpack "${all_downloads}" "${tmp_dir}"
  echo "Extraction complete"

  echo "Tweaking Configs..."
  write_config "${tmp_dir}/${number}/$(compiler)"
  echo "Tweaked!"

  mv "${tmp_dir}/${number}/$(compiler)"/* "${download_path}"
}

download_src() {
  local version=$1
  local download_path=$2

  tmp_dir=$(mktemp -d "${TMPDIR:-/tmp}/asdf-qt-XXXXXXXXXX")

  # cleanup on failures
  trap "rm -rf $tmp_dir" EXIT
  trap "rm -rf $download_path" ERR

  git clone git://code.qt.io/qt/qt5.git $tmp_dir
  cd $tmp_dir
  git checkout "${version}"
  perl init-repository -f

  mv "${tmp_dir}"/* "${download_path}"
}


build() {
  local src_dir=$1
  local install_dir=$2
  local n_cores=$3

  tmp_dir=$(mktemp -d "${TMPDIR:-/tmp}/asdf-qt-XXXXXXXXXX")

  # cleanup on failures
  trap "rm -rf $tmp_dir" EXIT
  trap "rm -rf $install_dir" ERR

  cd $tmp_dir

  $src_dir/configure \
    -developer-build \
    -prefix $install_dir \
    -opensource \
    -confirm-license \
    -nomake examples \
    -nomake tests

  make -j$n_cores
  make install
}

main() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local n_cores=$4

  download_path=$(mktemp -d "${TMPDIR:-/tmp}/asdf-qt-XXXXXXXXXX")

  if [ "$install_type" = "version" ]; then
    download_binary "$version" "$download_path"
    echo "Installing..."
    mv "${download_path}"/* "${install_path}"
    echo "Installed"
  elif [ "$install_type" = "ref" ]; then
    download_src "$version" "$download_path"
    install "${download_path}" "${install_path}" "${n_cores}"
  else
    echo "Unknown install type: $install_type"
    exit 1
  fi
}

if [ -z "$ASDF_INSTALL_TYPE" ]; then
  echo "ASDF_INSTALL_TYPE enviroment variable required"
  exit 1
fi

  if [ -z "$ASDF_INSTALL_VERSION" ]; then
  echo "ASDF_INSTALL_VERSION enviroment variable required"
  exit 1
fi

  if [ -z "$ASDF_INSTALL_PATH" ]; then
  echo "ASDF_INSTALL_PATH enviroment variable required"
  exit 1
fi

if [ -z "$ASDF_CONCURRENCY" ]; then
  echo "ASDF_CONCURRENCY enviroment variable required"
  exit 1
fi

main $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH $ASDF_CONCURRENCY
